// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlaceOrder.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlaceOrder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PlaceOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceOrder_AppendageEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PlaceOrder_2eproto() {
  protobuf_AddDesc_PlaceOrder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PlaceOrder.proto");
  GOOGLE_CHECK(file != NULL);
  PlaceOrder_descriptor_ = file->message_type(0);
  static const int PlaceOrder_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, clordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, ord_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, appendage_),
  };
  PlaceOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlaceOrder_descriptor_,
      PlaceOrder::default_instance_,
      PlaceOrder_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlaceOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceOrder, _is_default_instance_));
  PlaceOrder_AppendageEntry_descriptor_ = PlaceOrder_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PlaceOrder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlaceOrder_descriptor_, &PlaceOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        PlaceOrder_AppendageEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                PlaceOrder_AppendageEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_PlaceOrder_2eproto() {
  delete PlaceOrder::default_instance_;
  delete PlaceOrder_reflection_;
}

void protobuf_AddDesc_PlaceOrder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020PlaceOrder.proto\"\335\001\n\nPlaceOrder\022\014\n\004use"
    "r\030\001 \001(\t\022\017\n\007clordid\030\002 \001(\t\022\016\n\006symbol\030\003 \001(\t"
    "\022\014\n\004side\030\004 \001(\t\022\020\n\010ord_type\030\005 \001(\t\022\020\n\010quan"
    "tity\030\006 \001(\r\022\r\n\005price\030\007 \001(\r\022-\n\tappendage\030\010"
    " \003(\0132\032.PlaceOrder.AppendageEntry\0320\n\016Appe"
    "ndageEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\t:\002"
    "8\001b\006proto3", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlaceOrder.proto", &protobuf_RegisterTypes);
  PlaceOrder::default_instance_ = new PlaceOrder();
  PlaceOrder::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlaceOrder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlaceOrder_2eproto {
  StaticDescriptorInitializer_PlaceOrder_2eproto() {
    protobuf_AddDesc_PlaceOrder_2eproto();
  }
} static_descriptor_initializer_PlaceOrder_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int PlaceOrder::kUserFieldNumber;
const int PlaceOrder::kClordidFieldNumber;
const int PlaceOrder::kSymbolFieldNumber;
const int PlaceOrder::kSideFieldNumber;
const int PlaceOrder::kOrdTypeFieldNumber;
const int PlaceOrder::kQuantityFieldNumber;
const int PlaceOrder::kPriceFieldNumber;
const int PlaceOrder::kAppendageFieldNumber;
#endif  // !_MSC_VER

PlaceOrder::PlaceOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaceOrder)
}

void PlaceOrder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PlaceOrder::PlaceOrder(const PlaceOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlaceOrder)
}

void PlaceOrder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clordid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ord_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_ = 0u;
  price_ = 0u;
  appendage_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  appendage_.SetEntryDescriptor(
      &::PlaceOrder_AppendageEntry_descriptor_);
}

PlaceOrder::~PlaceOrder() {
  // @@protoc_insertion_point(destructor:PlaceOrder)
  SharedDtor();
}

void PlaceOrder::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clordid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ord_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PlaceOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceOrder_descriptor_;
}

const PlaceOrder& PlaceOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlaceOrder_2eproto();
  return *default_instance_;
}

PlaceOrder* PlaceOrder::default_instance_ = NULL;

PlaceOrder* PlaceOrder::New(::google::protobuf::Arena* arena) const {
  PlaceOrder* n = new PlaceOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlaceOrder::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlaceOrder*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(quantity_, price_);
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clordid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ord_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  appendage_.Clear();
}

bool PlaceOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaceOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlaceOrder.user"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clordid;
        break;
      }

      // optional string clordid = 2;
      case 2: {
        if (tag == 18) {
         parse_clordid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clordid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clordid().data(), this->clordid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlaceOrder.clordid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_symbol;
        break;
      }

      // optional string symbol = 3;
      case 3: {
        if (tag == 26) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlaceOrder.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_side;
        break;
      }

      // optional string side = 4;
      case 4: {
        if (tag == 34) {
         parse_side:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->side().data(), this->side().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlaceOrder.side"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ord_type;
        break;
      }

      // optional string ord_type = 5;
      case 5: {
        if (tag == 42) {
         parse_ord_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ord_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ord_type().data(), this->ord_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlaceOrder.ord_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_quantity;
        break;
      }

      // optional uint32 quantity = 6;
      case 6: {
        if (tag == 48) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_price;
        break;
      }

      // optional uint32 price = 7;
      case 7: {
        if (tag == 56) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_appendage;
        break;
      }

      // map<uint32, string> appendage = 8;
      case 8: {
        if (tag == 66) {
         parse_appendage:
          DO_(input->IncrementRecursionDepth());
         parse_loop_appendage:
          ::google::protobuf::scoped_ptr<PlaceOrder_AppendageEntry> entry(appendage_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_appendage())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->mutable_value()->data(),
            entry->mutable_value()->length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlaceOrder.AppendageEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_appendage;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlaceOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaceOrder)
  return false;
#undef DO_
}

void PlaceOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaceOrder)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // optional string clordid = 2;
  if (this->clordid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clordid().data(), this->clordid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.clordid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clordid(), output);
  }

  // optional string symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // optional string side = 4;
  if (this->side().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->side().data(), this->side().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.side");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->side(), output);
  }

  // optional string ord_type = 5;
  if (this->ord_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ord_type().data(), this->ord_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.ord_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ord_type(), output);
  }

  // optional uint32 quantity = 6;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->quantity(), output);
  }

  // optional uint32 price = 7;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price(), output);
  }

  // map<uint32, string> appendage = 8;
  {
    ::google::protobuf::scoped_ptr<PlaceOrder_AppendageEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->appendage().begin();
        it != this->appendage().end(); ++it) {
      entry.reset(appendage_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          8, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "PlaceOrder.AppendageEntry.value");
    }
  }

  // @@protoc_insertion_point(serialize_end:PlaceOrder)
}

::google::protobuf::uint8* PlaceOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaceOrder)
  // optional string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // optional string clordid = 2;
  if (this->clordid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clordid().data(), this->clordid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.clordid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clordid(), target);
  }

  // optional string symbol = 3;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // optional string side = 4;
  if (this->side().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->side().data(), this->side().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.side");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->side(), target);
  }

  // optional string ord_type = 5;
  if (this->ord_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ord_type().data(), this->ord_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaceOrder.ord_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ord_type(), target);
  }

  // optional uint32 quantity = 6;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->quantity(), target);
  }

  // optional uint32 price = 7;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->price(), target);
  }

  // map<uint32, string> appendage = 8;
  {
    ::google::protobuf::scoped_ptr<PlaceOrder_AppendageEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->appendage().begin();
        it != this->appendage().end(); ++it) {
      entry.reset(appendage_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              8, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "PlaceOrder.AppendageEntry.value");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlaceOrder)
  return target;
}

int PlaceOrder::ByteSize() const {
  int total_size = 0;

  // optional string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // optional string clordid = 2;
  if (this->clordid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clordid());
  }

  // optional string symbol = 3;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string side = 4;
  if (this->side().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->side());
  }

  // optional string ord_type = 5;
  if (this->ord_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ord_type());
  }

  // optional uint32 quantity = 6;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quantity());
  }

  // optional uint32 price = 7;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());
  }

  // map<uint32, string> appendage = 8;
  total_size += 1 * this->appendage_size();
  {
    ::google::protobuf::scoped_ptr<PlaceOrder_AppendageEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->appendage().begin();
        it != this->appendage().end(); ++it) {
      entry.reset(appendage_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceOrder::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlaceOrder* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlaceOrder>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceOrder::MergeFrom(const PlaceOrder& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  appendage_.MergeFrom(from.appendage_);
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.clordid().size() > 0) {

    clordid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clordid_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.side().size() > 0) {

    side_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.side_);
  }
  if (from.ord_type().size() > 0) {

    ord_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ord_type_);
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
}

void PlaceOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrder::CopyFrom(const PlaceOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrder::IsInitialized() const {

  return true;
}

void PlaceOrder::Swap(PlaceOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlaceOrder::InternalSwap(PlaceOrder* other) {
  user_.Swap(&other->user_);
  clordid_.Swap(&other->clordid_);
  symbol_.Swap(&other->symbol_);
  side_.Swap(&other->side_);
  ord_type_.Swap(&other->ord_type_);
  std::swap(quantity_, other->quantity_);
  std::swap(price_, other->price_);
  appendage_.Swap(&other->appendage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlaceOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceOrder_descriptor_;
  metadata.reflection = PlaceOrder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceOrder

// optional string user = 1;
void PlaceOrder::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlaceOrder::user() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.user)
}
 void PlaceOrder::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.user)
}
 void PlaceOrder::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.user)
}
 ::std::string* PlaceOrder::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaceOrder::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.user)
}

// optional string clordid = 2;
void PlaceOrder::clear_clordid() {
  clordid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlaceOrder::clordid() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.clordid)
  return clordid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_clordid(const ::std::string& value) {
  
  clordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.clordid)
}
 void PlaceOrder::set_clordid(const char* value) {
  
  clordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.clordid)
}
 void PlaceOrder::set_clordid(const char* value, size_t size) {
  
  clordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.clordid)
}
 ::std::string* PlaceOrder::mutable_clordid() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.clordid)
  return clordid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaceOrder::release_clordid() {
  
  return clordid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_allocated_clordid(::std::string* clordid) {
  if (clordid != NULL) {
    
  } else {
    
  }
  clordid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clordid);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.clordid)
}

// optional string symbol = 3;
void PlaceOrder::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlaceOrder::symbol() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.symbol)
}
 void PlaceOrder::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.symbol)
}
 void PlaceOrder::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.symbol)
}
 ::std::string* PlaceOrder::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaceOrder::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.symbol)
}

// optional string side = 4;
void PlaceOrder::clear_side() {
  side_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlaceOrder::side() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.side)
  return side_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_side(const ::std::string& value) {
  
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.side)
}
 void PlaceOrder::set_side(const char* value) {
  
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.side)
}
 void PlaceOrder::set_side(const char* value, size_t size) {
  
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.side)
}
 ::std::string* PlaceOrder::mutable_side() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.side)
  return side_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaceOrder::release_side() {
  
  return side_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_allocated_side(::std::string* side) {
  if (side != NULL) {
    
  } else {
    
  }
  side_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), side);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.side)
}

// optional string ord_type = 5;
void PlaceOrder::clear_ord_type() {
  ord_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PlaceOrder::ord_type() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.ord_type)
  return ord_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_ord_type(const ::std::string& value) {
  
  ord_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.ord_type)
}
 void PlaceOrder::set_ord_type(const char* value) {
  
  ord_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.ord_type)
}
 void PlaceOrder::set_ord_type(const char* value, size_t size) {
  
  ord_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.ord_type)
}
 ::std::string* PlaceOrder::mutable_ord_type() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.ord_type)
  return ord_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlaceOrder::release_ord_type() {
  
  return ord_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlaceOrder::set_allocated_ord_type(::std::string* ord_type) {
  if (ord_type != NULL) {
    
  } else {
    
  }
  ord_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ord_type);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.ord_type)
}

// optional uint32 quantity = 6;
void PlaceOrder::clear_quantity() {
  quantity_ = 0u;
}
 ::google::protobuf::uint32 PlaceOrder::quantity() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.quantity)
  return quantity_;
}
 void PlaceOrder::set_quantity(::google::protobuf::uint32 value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:PlaceOrder.quantity)
}

// optional uint32 price = 7;
void PlaceOrder::clear_price() {
  price_ = 0u;
}
 ::google::protobuf::uint32 PlaceOrder::price() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.price)
  return price_;
}
 void PlaceOrder::set_price(::google::protobuf::uint32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:PlaceOrder.price)
}

// map<uint32, string> appendage = 8;
int PlaceOrder::appendage_size() const {
  return appendage_.size();
}
void PlaceOrder::clear_appendage() {
  appendage_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
PlaceOrder::appendage() const {
  // @@protoc_insertion_point(field_map:PlaceOrder.appendage)
  return appendage_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
PlaceOrder::mutable_appendage() {
  // @@protoc_insertion_point(field_mutable_map:PlaceOrder.appendage)
  return appendage_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
