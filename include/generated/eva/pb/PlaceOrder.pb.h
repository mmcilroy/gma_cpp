// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlaceOrder.proto

#ifndef PROTOBUF_PlaceOrder_2eproto__INCLUDED
#define PROTOBUF_PlaceOrder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PlaceOrder_2eproto();
void protobuf_AssignDesc_PlaceOrder_2eproto();
void protobuf_ShutdownFile_PlaceOrder_2eproto();

class PlaceOrder;

// ===================================================================

class PlaceOrder : public ::google::protobuf::Message {
 public:
  PlaceOrder();
  virtual ~PlaceOrder();

  PlaceOrder(const PlaceOrder& from);

  inline PlaceOrder& operator=(const PlaceOrder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaceOrder& default_instance();

  void Swap(PlaceOrder* other);

  // implements Message ----------------------------------------------

  inline PlaceOrder* New() const { return New(NULL); }

  PlaceOrder* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaceOrder& from);
  void MergeFrom(const PlaceOrder& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlaceOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string clordid = 2;
  void clear_clordid();
  static const int kClordidFieldNumber = 2;
  const ::std::string& clordid() const;
  void set_clordid(const ::std::string& value);
  void set_clordid(const char* value);
  void set_clordid(const char* value, size_t size);
  ::std::string* mutable_clordid();
  ::std::string* release_clordid();
  void set_allocated_clordid(::std::string* clordid);

  // optional string symbol = 3;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // optional string side = 4;
  void clear_side();
  static const int kSideFieldNumber = 4;
  const ::std::string& side() const;
  void set_side(const ::std::string& value);
  void set_side(const char* value);
  void set_side(const char* value, size_t size);
  ::std::string* mutable_side();
  ::std::string* release_side();
  void set_allocated_side(::std::string* side);

  // optional string ord_type = 5;
  void clear_ord_type();
  static const int kOrdTypeFieldNumber = 5;
  const ::std::string& ord_type() const;
  void set_ord_type(const ::std::string& value);
  void set_ord_type(const char* value);
  void set_ord_type(const char* value, size_t size);
  ::std::string* mutable_ord_type();
  ::std::string* release_ord_type();
  void set_allocated_ord_type(::std::string* ord_type);

  // optional uint32 quantity = 6;
  void clear_quantity();
  static const int kQuantityFieldNumber = 6;
  ::google::protobuf::uint32 quantity() const;
  void set_quantity(::google::protobuf::uint32 value);

  // optional uint32 price = 7;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  ::google::protobuf::uint32 price() const;
  void set_price(::google::protobuf::uint32 value);

  // map<uint32, string> appendage = 8;
  int appendage_size() const;
  void clear_appendage();
  static const int kAppendageFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
      appendage() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
      mutable_appendage();

  // @@protoc_insertion_point(class_scope:PlaceOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr clordid_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr side_;
  ::google::protobuf::internal::ArenaStringPtr ord_type_;
  ::google::protobuf::uint32 quantity_;
  ::google::protobuf::uint32 price_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      PlaceOrder_AppendageEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > appendage_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_PlaceOrder_2eproto();
  friend void protobuf_AssignDesc_PlaceOrder_2eproto();
  friend void protobuf_ShutdownFile_PlaceOrder_2eproto();

  void InitAsDefaultInstance();
  static PlaceOrder* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PlaceOrder

// optional string user = 1;
inline void PlaceOrder::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaceOrder::user() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.user)
}
inline void PlaceOrder::set_user(const char* value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.user)
}
inline void PlaceOrder::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.user)
}
inline ::std::string* PlaceOrder::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceOrder::release_user() {
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.user)
}

// optional string clordid = 2;
inline void PlaceOrder::clear_clordid() {
  clordid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaceOrder::clordid() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.clordid)
  return clordid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_clordid(const ::std::string& value) {
  
  clordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.clordid)
}
inline void PlaceOrder::set_clordid(const char* value) {
  
  clordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.clordid)
}
inline void PlaceOrder::set_clordid(const char* value, size_t size) {
  
  clordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.clordid)
}
inline ::std::string* PlaceOrder::mutable_clordid() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.clordid)
  return clordid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceOrder::release_clordid() {
  
  return clordid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_allocated_clordid(::std::string* clordid) {
  if (clordid != NULL) {
    
  } else {
    
  }
  clordid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clordid);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.clordid)
}

// optional string symbol = 3;
inline void PlaceOrder::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaceOrder::symbol() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.symbol)
}
inline void PlaceOrder::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.symbol)
}
inline void PlaceOrder::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.symbol)
}
inline ::std::string* PlaceOrder::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceOrder::release_symbol() {
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.symbol)
}

// optional string side = 4;
inline void PlaceOrder::clear_side() {
  side_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaceOrder::side() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.side)
  return side_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_side(const ::std::string& value) {
  
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.side)
}
inline void PlaceOrder::set_side(const char* value) {
  
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.side)
}
inline void PlaceOrder::set_side(const char* value, size_t size) {
  
  side_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.side)
}
inline ::std::string* PlaceOrder::mutable_side() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.side)
  return side_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceOrder::release_side() {
  
  return side_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_allocated_side(::std::string* side) {
  if (side != NULL) {
    
  } else {
    
  }
  side_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), side);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.side)
}

// optional string ord_type = 5;
inline void PlaceOrder::clear_ord_type() {
  ord_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlaceOrder::ord_type() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.ord_type)
  return ord_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_ord_type(const ::std::string& value) {
  
  ord_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaceOrder.ord_type)
}
inline void PlaceOrder::set_ord_type(const char* value) {
  
  ord_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaceOrder.ord_type)
}
inline void PlaceOrder::set_ord_type(const char* value, size_t size) {
  
  ord_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaceOrder.ord_type)
}
inline ::std::string* PlaceOrder::mutable_ord_type() {
  
  // @@protoc_insertion_point(field_mutable:PlaceOrder.ord_type)
  return ord_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlaceOrder::release_ord_type() {
  
  return ord_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrder::set_allocated_ord_type(::std::string* ord_type) {
  if (ord_type != NULL) {
    
  } else {
    
  }
  ord_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ord_type);
  // @@protoc_insertion_point(field_set_allocated:PlaceOrder.ord_type)
}

// optional uint32 quantity = 6;
inline void PlaceOrder::clear_quantity() {
  quantity_ = 0u;
}
inline ::google::protobuf::uint32 PlaceOrder::quantity() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.quantity)
  return quantity_;
}
inline void PlaceOrder::set_quantity(::google::protobuf::uint32 value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:PlaceOrder.quantity)
}

// optional uint32 price = 7;
inline void PlaceOrder::clear_price() {
  price_ = 0u;
}
inline ::google::protobuf::uint32 PlaceOrder::price() const {
  // @@protoc_insertion_point(field_get:PlaceOrder.price)
  return price_;
}
inline void PlaceOrder::set_price(::google::protobuf::uint32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:PlaceOrder.price)
}

// map<uint32, string> appendage = 8;
inline int PlaceOrder::appendage_size() const {
  return appendage_.size();
}
inline void PlaceOrder::clear_appendage() {
  appendage_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
PlaceOrder::appendage() const {
  // @@protoc_insertion_point(field_map:PlaceOrder.appendage)
  return appendage_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
PlaceOrder::mutable_appendage() {
  // @@protoc_insertion_point(field_mutable_map:PlaceOrder.appendage)
  return appendage_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlaceOrder_2eproto__INCLUDED
